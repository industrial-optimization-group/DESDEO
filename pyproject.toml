[project]
name = "desdeo"
version = "2.0.0"
description = "DESDEO is a modular and open source framework for interactive multiobjective optimization."
authors = [
    {name="Giovanni Misitano",  email="giovanni.a.misitano@jyu.fi"},
    {name="Bhupinder Saini", email="bhupinder.s.saini@jyu.fi"},
]
license = "MIT"
readme = "README.md"
exclude = [
    "tests",
    "desdeo/api",
    "desdeo/utopia_stuff"
]
keywords=["optimization", "decision-support", "multiobjective optimization", "evolutionary optimization", "interactive methods"]
requires-python = ">=3.12,<3.13"
dependencies = [
    "numpy >= 2.2.0",
    "scipy >= 1.11.4",
    "polars >= 1.17",
    "pyarrow >= 20.0.0",
    "numba >= 0.61.0",
    "pydantic >= 2.9",
    "sympy >= 1.0",
    "pyparsing >= 3.0",
    "nevergrad >= 1.0.12",
    "bayesian-optimization >= 1.0",  # They recently released v2 which breaks compatibility with nevergrad
    "pyomo >= 6.8",
    "gurobipy >= 12.0.0",
    "tsp-solver >= 0.1",
    "greenlet >= 3.1.1",
    "pymoo >= 0.6.1.2",
    "shap >= 0.47.0",
    "cvxpy[scip] >= 1.6.4",
    "moocore >= 0.1.7"
]

[project.urls]
homepage="https://github.com/industrial-optimization-group/DESDEO"
repository="https://github.com/industrial-optimization-group/DESDEO"
documentation="https://desdeo.readthedocs.io/en/latest/"
"Bug tracker"="https://github.com/industrial-optimization-group/DESDEO/issues"

[project.optional-dependencies]
eralchemy = ["eralchemy>=1.5.0"]

[tool.poetry.group.viz]
optional=true

[tool.poetry.group.viz.dependencies]
seaborn = "^0.13.0"
plotly = "^6.0"
scienceplots = "^2.1.1"

[tool.poetry.group.api]
optional=true

[tool.poetry.group.api.dependencies]
sqlmodel = "^0.0.24"
httpx = "^0.28.1"
fastapi = "^0.115.12"
bcrypt = "^4.3.0"
python-jose = {extras = ["cryptography"], version = "^3.4.0"}
python-multipart = "^0.0.20"
uvicorn = "^0.34.2"
sqlalchemy-utils = "^0.41.2"

[tool.poetry.group.dev]
optional=true

[tool.poetry.group.dev.dependencies]
ruff = "^0.11"
pytest = "^8.0"
mkdocs = "^1.0"
python-markdown-math = "^0.9"
mkdocs-macros-plugin = "^1.0.5"
djlint = "^1.34.1"
pyparsing = { extras = ["diagrams"], version = "^3.1.1" }
isort = "^6.0"
mypy = "^1.0"
mkdocstrings-python = "^1.0"
mkdocs-material = "^9.5.12"
pytest-xdist = "^3.5.0"
pytest-testmon = "^2.1.1"
snakeviz = "^2.2.0"
pytest-asyncio = "^0.26.0"
griffe = "^1.4.1"
mkdocs-jupyter = "^0.25.1"
jupytext = "^1.16.4"
mkdocs-include-markdown-plugin = { extras = ["cache"], version = "^7.0.0" }
jupyter = "^1.0"
jupyterlab = "^4.0"
neoteroi-mkdocs = "^1.1.2"

[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
lint.select = [
    "E",
    "F",
    "W",
    "C901",
    "D",
    "UP",
    "S",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "T20",
    "PIE",
    "RET",
    "PTH",
    "TD",   # Comment this out if too annoying
    "FIX",  # Comment this out if too annoying
    "SIM",
    "PL",
    "TRY",
    "FURB",
    "LOG",
    "NPY",
    "RUF",
    "I",
    "N",
]
lint.ignore = [
    "COM812",  # Enforcing trailing commas is too annoying.
    "PLR0915", # "too many statements (>50)"
    "T201",    # TODO: remove? it allow print statements
    "TRY003",  # allow long error messages
]
lint.pydocstyle.convention = "google"


# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = []
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 120

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.12.
target-version = "py312"

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.per-file-ignores]
[tool.ruff.lint.per-file-ignores]
# Ignore certain rules in test files
"tests/**/*.py" = [
    "S101",    # asserts allowed in tests...
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
]

[tool.ruff.format]
quote-style = "double"

[tool.djlint]
profile = "jinja"

[tool.isort]
profile = "black"

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
    "skip: stests marked to be skipped",
    "slow: mark test as slow",
    "nautilus_navigator: tests related to the NAUTILUS Navigator method",
    "performance: tests that are related to performance. Skipped by default",
    "infix_parser: tests related to the infix parser",
    "pyomo: tests related to pyomo models, their parsing, and evaluation",
    "sympy: tests related to sympy expressions, their parsing, and evaluatio.",
    "nautili: tests related to the NAUTILI method",
    "nautilus: tests related to the NAUTILUS method",
    "nevergrad: tests related to the nevergrad solvers and their interfaces",
    "scalarization: tests related to scalarization functions",
    "nimbus: tests related to the NIMBUS method",
    "gurobipy: tests related to the gurobipy solver",
    "pareto_navigator: tests related to the Pareto Navigator method",
    "patterns: tests related to the publisher-subscriber pattern",
    "forest_problem: tests related to the forest problem examples.",
    "group_scalarization: tests related to group scalarization functions and utilities.",
    "polars: tests related to the polars evaluator and math parser.",
    "rpm: tests related to the reference point method.",
    "scipy: tests that utilize any of the scipy optimizers.",
    "proximal: tests related to the proximal evaluator.",
    "api: tests related to the web API.",
    "json: tests related to the Math JSON parser.",
    "schema: tests related to the Problem schema.",
    "utils: tests related to various utilities.",
    "nogithub: tests that should not be run in GitHub actions.",
    "simulator_support: tests related to simulator and surrogate support",
    "explainer: tests related to explainers and related functionalities.",
    "explanation_utils: tests related to explanations module utilities.",
    "ea: tests related to evolutionary methods.",
    "indicators: tests related to indicators.",
    "testproblem: tests related to test problems.",
    "enautilus: tests related to the E-NAUTILUS method.",

]
pythonpath = "."
asyncio_default_fixture_loop_scope = "function"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
